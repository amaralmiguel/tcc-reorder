/**
 * @author Miguel Amaral
*/

// Define o tamanho que a visualização da matriz ocupará em tela
var margin = { top: 120, right: 0, bottom: 0, left: 100 },
    width = 800 - margin.left - margin.right,
    height = 800 - margin.top - margin.bottom;

// Variável global para as funções a seguir
var matrix;

/** 
 * Renderiza a matriz em tela
 * @param rowLabels rótulos das linhas da matriz (não obrigatório)
 * @param colLabels rótulos das colunas da matriz (não obrigatório)
*/
function drawMatrixOnScreen(rowLabels, colLabels) {
    d3.select("svg").remove();
    svg = d3.select("#matrix").append("svg")
        .attr("width", width + margin.left + margin.right)
        .attr("height", height + margin.top + margin.bottom)
        .append("g")
        .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

    table({ matrix: matrix, row_labels: rowLabels, col_labels: colLabels });
}

/** 
 * Gera uma nova matriz com um padrão canônico de dados e exibe na tela
*/  
function createMatrix() {
    let pattern = $('#matrixPattern').val(),
        paramB = parseFloat($('#paramB').val()),
        numberOfRows = parseInt($('#numberRows').val()),
        numberOfCols = parseInt($('#numberCols').val()),
        noiseLevel = parseFloat($('#noiseLevel').val()),
        isBinary = $('[name="is-binary"]:checked').val() == 'true' ? true : false;

    let instance = new ReorderableMatrixBuilder(numberOfRows, numberOfCols, paramB, noiseLevel, isBinary);

    switch (pattern) {
        case 'equi':
            matrix = instance.equi();
            break;
        case 'simplex':
            matrix = instance.simplex();
            break;
        case 'band':
            matrix = instance.band();
            break;
        case 'circumplex':
            matrix = instance.circumplex();
            break;
        case 'block':
            matrix = instance.block();
            break;
        default:
            break;
    };

    // Exibe a matriz na tela:
    drawMatrixOnScreen();
}


/** 
 * Exibe a matriz na tela de acordo com o exemplo selecionado
*/
function realWorldData() {
    let selectedExample = $('#selectedExample').val(),
        rowLabels, colLabels;

    switch (selectedExample) {
        case 'circumplexExample':
            matrix = [
                [1.000, .487, .458, .184, .133, -.270, -.216, -.404, -.240, -.075, .035, .462],
                [.487, 1.000, .651, .289, .343, -.038, -.064, -.259, -.212, -.202, -.134, .150],
                [.458, .651, 1.000, .390, .476, .022, .034, -.196, -.157, -.164, -.168, .042],
                [.184, .289, .390, 1.000, .478, .195, .218, .090, -.002, -.065, -.043, -.109],
                [.133, .343, .476, .478, 1.000, .276, .255, .060, -.025, -.116, -.159, -.263],
                [-.270, -.038, .022, .195, .276, 1.000, .518, .364, .075, -.042, -.180, -.388],
                [-.216, -.064, .034, .218, .255, .518, 1.000, .476, .132, .031, -.155, -.334],
                [-.404, -.259, -.196, .090, .060, .364, .476, 1.000, .468, .183, .077, -.225],
                [-.240, -.212, -.157, -.002, -.025, .075, .132, .468, 1.000, .390, .270, -.032],
                [-.075, -.202, -.164, -.065, -.116, -.042, .031, .183, .390, 1.000, .258, .166],
                [.035, -.134, -.168, -.043, -.159, -.180, -.155, .077, .270, .258, 1.000, .363],
                [.462, .150, .042, -.109, -.263, -.388, -.334, -.225, -.032, .166, .363, 1.000],
            ];
            rowLabels = ['Content', 'Relaxed', 'Calm', 'Placid',
                'Still', 'Drowsy', 'Dull', 'Gloomy', 'Distress',
                'Nervous', 'Intense', 'Excited'
            ];

            colLabels = rowLabels;
            break;

        case 'simplexExample':
            matrix = [
                [0.105018, 0.111658, 0.111597, 0.147628, 0.185694, 0.163267, 0.123195, 0.261142, 0.156530, 0.167780, 0.156530, 0.213265, 0.255273, 0.243844, 0.195770, 0.386401, 0.343539, 0.100903, 0.231127, 0.312946, 0.189310, 0.142725, 0.124622, 0.209141, 0.192866, 0.214230, 0.185530, 0.241016, 0.159393, 0.152145, 0.204783],
                [0.104150, 0.104743, 0.104452, 0.128915, 0.222929, 0.107936, 0.122581, 0.180581, 0.143464, 0.159539, 0.143465, 0.279757, 0.266069, 0.183149, 0.293643, 0.182950, 0.275168, 0.139015, 0.142655, 0.282264, 0.170056, 0.114609, 0.147107, 0.230621, 0.218249, 0.228364, 0.159889, 0.185827, 0.147831, 0.183283, 0.230750],
                [0.099668, 0.103966, 0.105808, 0.129974, 0.188889, 0.129975, 0.120099, 0.165072, 0.140923, 0.151398, 0.140923, 0.177213, 0.268380, 0.134841, 0.194590, 0.277886, 0.298926, 0.106166, 0.136085, 0.304444, 0.157678, 0.108900, 0.117449, 0.221481, 0.189813, 0.194872, 0.143339, 0.223330, 0.133985, 0.191302, 0.132072],
                [0.095569, 0.097226, 0.100493, 0.125659, 0.176707, 0.113355, 0.105913, 0.154120, 0.127504, 0.174004, 0.127504, 0.194504, 0.263154, 0.160442, 0.189310, 0.210846, 0.236373, 0.095318, 0.128196, 0.291376, 0.120069, 0.123437, 0.127016, 0.226631, 0.178091, 0.203191, 0.150719, 0.155987, 0.128637, 0.211249, 0.134889],
                [0.073078, 0.108548, 0.111845, 0.104561, 0.144003, 0.099887, 0.131129, 0.154949, 0.096680, 0.136745, 0.096683, 0.285053, 0.202636, 0.156469, 0.128748, 0.197982, 0.214844, 0.083575, 0.145459, 0.305760, 0.148759, 0.132071, 0.123204, 0.179255, 0.132429, 0.159399, 0.134344, 0.134892, 0.106469, 0.161999, 0.223673],
                [0.082210, 0.097176, 0.096582, 0.115019, 0.126545, 0.100589, 0.111510, 0.140408, 0.100931, 0.133729, 0.100931, 0.189975, 0.259350, 0.203709, 0.130241, 0.147164, 0.176736, 0.083586, 0.112054, 0.211487, 0.181094, 0.149114, 0.097799, 0.140977, 0.205726, 0.187306, 0.125121, 0.147518, 0.133505, 0.174900, 0.160407],
                [0.074591, 0.093221, 0.090424, 0.107407, 0.111520, 0.088686, 0.106049, 0.117596, 0.093253, 0.119390, 0.093252, 0.150913, 0.254098, 0.136260, 0.121016, 0.160160, 0.200984, 0.101258, 0.127048, 0.198168, 0.208440, 0.139390, 0.109564, 0.117191, 0.201324, 0.156103, 0.116998, 0.163276, 0.130833, 0.161184, 0.152075],
                [0.081076, 0.084047, 0.093581, 0.094967, 0.127213, 0.087524, 0.120281, 0.140261, 0.081292, 0.101486, 0.081293, 0.255070, 0.150905, 0.140495, 0.093501, 0.168696, 0.201084, 0.065430, 0.122053, 0.231958, 0.135161, 0.099431, 0.143713, 0.161135, 0.118609, 0.135060, 0.151674, 0.142666, 0.110518, 0.127837, 0.200208],
                [0.062566, 0.086681, 0.087860, 0.088834, 0.121654, 0.099920, 0.105083, 0.139166, 0.085647, 0.071728, 0.085646, 0.178446, 0.149196, 0.131282, 0.151730, 0.155379, 0.153360, 0.067249, 0.130136, 0.188069, 0.179506, 0.093108, 0.129674, 0.102457, 0.178139, 0.171496, 0.092411, 0.127775, 0.118508, 0.165747, 0.145616],
                [0.061950, 0.095017, 0.071611, 0.097084, 0.114564, 0.092047, 0.083071, 0.102403, 0.106107, 0.118011, 0.106104, 0.174231, 0.227295, 0.096124, 0.128980, 0.133359, 0.191571, 0.096640, 0.104755, 0.191105, 0.139907, 0.102144, 0.098344, 0.136735, 0.167973, 0.147655, 0.085732, 0.122971, 0.093104, 0.167124, 0.140127],
                [0.060615, 0.081139, 0.082358, 0.085458, 0.112575, 0.086341, 0.097404, 0.113494, 0.103721, 0.089803, 0.103719, 0.147242, 0.178720, 0.122847, 0.100039, 0.135947, 0.139747, 0.127237, 0.114844, 0.174967, 0.114657, 0.093361, 0.094011, 0.145607, 0.150898, 0.156851, 0.123287, 0.097520, 0.079917, 0.187424, 0.142872],
                [0.065329, 0.091023, 0.069428, 0.089036, 0.115899, 0.086857, 0.074689, 0.104414, 0.105774, 0.119747, 0.105773, 0.144498, 0.151582, 0.124586, 0.105172, 0.127322, 0.230006, 0.111253, 0.095056, 0.146242, 0.120606, 0.108964, 0.077635, 0.157025, 0.144278, 0.163636, 0.076779, 0.113742, 0.071347, 0.133699, 0.094426],
                [0.055888, 0.071644, 0.061656, 0.073454, 0.096701, 0.083798, 0.080416, 0.102046, 0.076904, 0.068846, 0.076905, 0.125497, 0.117854, 0.155847, 0.178066, 0.191093, 0.169371, 0.108033, 0.096340, 0.165471, 0.102628, 0.094507, 0.097431, 0.132797, 0.099720, 0.104199, 0.096731, 0.147275, 0.093412, 0.089053, 0.095742],
                [0.065368, 0.074892, 0.058392, 0.087089, 0.093391, 0.073016, 0.071889, 0.103777, 0.078115, 0.073163, 0.078116, 0.160127, 0.124928, 0.117252, 0.175094, 0.159369, 0.117362, 0.055128, 0.095817, 0.180112, 0.099031, 0.081171, 0.103499, 0.131933, 0.102462, 0.100976, 0.101874, 0.105505, 0.127989, 0.098784, 0.090591],
                [0.051817, 0.062251, 0.058321, 0.096128, 0.098501, 0.079592, 0.072795, 0.126087, 0.088305, 0.074221, 0.088304, 0.129521, 0.159133, 0.113807, 0.109904, 0.101824, 0.145311, 0.043256, 0.116791, 0.163018, 0.069326, 0.079701, 0.072063, 0.100301, 0.109437, 0.101237, 0.096774, 0.098393, 0.079778, 0.103047, 0.104493],
                [0.051688, 0.061277, 0.056026, 0.071479, 0.094369, 0.091564, 0.059431, 0.098587, 0.070109, 0.100435, 0.070110, 0.125571, 0.145376, 0.150160, 0.096574, 0.141730, 0.157636, 0.043887, 0.117373, 0.176181, 0.099848, 0.090358, 0.104835, 0.120249, 0.106607, 0.118311, 0.142737, 0.084033, 0.086874, 0.091840, 0.073767],
                [0.401552, 0.498550, 0.518831, 0.918566, 0.719836, 0.482712, 0.528383, 0.839212, 0.587312, 0.385003, 0.587315, 0.741244, 1.376197, 0.619774, 0.554456, 0.671579, 0.849711, 0.321243, 0.498348, 0.691503, 0.440672, 0.637550, 0.870697, 0.491635, 0.476899, 1.705118, 0.523834, 0.634429, 0.443843, 0.939129, 0.448629],
                [0.264556, 0.271732, 0.264151, 0.552579, 0.492226, 0.253645, 0.278114, 0.464217, 0.515112, 0.262790, 0.515111, 0.594318, 0.764703, 0.378877, 0.649338, 0.510417, 0.805799, 0.271856, 0.576235, 0.711458, 0.306566, 0.315970, 0.444880, 0.451656, 0.318268, 0.876667, 0.354266, 0.297042, 0.227500, 0.440663, 0.474262],
                [0.230787, 0.364567, 0.276149, 0.375882, 0.430716, 0.377075, 0.310570, 0.405895, 0.462486, 0.501533, 0.462496, 0.490512, 0.508814, 0.365977, 0.515307, 0.503945, 0.646832, 0.271252, 0.332692, 0.454854, 0.216076, 0.246653, 0.380227, 0.389905, 0.434299, 0.652720, 0.553723, 0.254043, 0.196993, 0.375475, 0.367268],
                [0.251725, 0.215478, 0.216637, 0.293134, 0.372747, 0.262890, 0.238604, 0.348741, 0.391481, 0.250197, 0.391482, 0.393367, 0.649760, 0.369283, 0.376409, 0.459521, 0.415710, 0.219521, 0.468476, 0.448421, 0.285241, 0.246650, 0.288792, 0.277381, 0.344771, 0.540461, 0.346081, 0.266330, 0.223436, 0.262353, 0.413613],
                [0.175225, 0.213843, 0.188677, 0.262731, 0.294403, 0.226848, 0.167258, 0.297775, 0.247251, 0.177683, 0.247248, 0.290798, 0.498823, 0.314700, 0.371215, 0.325716, 0.335301, 0.265856, 0.291048, 0.459684, 0.244264, 0.292038, 0.188280, 0.288968, 0.216826, 0.370075, 0.288439, 0.199580, 0.178686, 0.242134, 0.443823],
                [0.144510, 0.175272, 0.205950, 0.195068, 0.236030, 0.201182, 0.177850, 0.222634, 0.203705, 0.167335, 0.203704, 0.368520, 0.323985, 0.330567, 0.310285, 0.311181, 0.394460, 0.129749, 0.255347, 0.347200, 0.256753, 0.210794, 0.219984, 0.309625, 0.285469, 0.392534, 0.257083, 0.217338, 0.189894, 0.226006, 0.215155],
                [0.113109, 0.158136, 0.168318, 0.155829, 0.253618, 0.177006, 0.186615, 0.199718, 0.209511, 0.167243, 0.209515, 0.302992, 0.343732, 0.372135, 0.263175, 0.288888, 0.355865, 0.126423, 0.177786, 0.322251, 0.174511, 0.164020, 0.167788, 0.391033, 0.260820, 0.346708, 0.186898, 0.345484, 0.143277, 0.215836, 0.239343],
                [0.101566, 0.135062, 0.138330, 0.143084, 0.243923, 0.162230, 0.157966, 0.235611, 0.168933, 0.136399, 0.168935, 0.256922, 0.277692, 0.277100, 0.233738, 0.249020, 0.315788, 0.149630, 0.172642, 0.301082, 0.176092, 0.188132, 0.162148, 0.366781, 0.225897, 0.289870, 0.193708, 0.240523, 0.185006, 0.214264, 0.165445],
            ];
            rowLabels = [
                '10RM-0', '11RM-0', '12RM-0', '13RM-0', '14RM-0', '15RM-0',
                '16RM-0', '17RM-0', '18RM-0', '19RM-0', '20RM-0', '21RM-0',
                '22RM-0', '23RM-0', '24RM-0', '25RM-0', '2RM-0', '3RM-0',
                '4RM-0', '5RM-0', '6RM-0', '7RM-0', '8RM-0', '9RM-0'
            ];

            colLabels = ['NPV', 'ORF', 'Np', 'Wp', 'Winj', 'GRF',
                'Gp', 'Lp', 'OIP', 'WIP', 'GIP', 'WEIIN1', 'WEIIN2',
                'WEIIN3', 'WEIIN4', 'WEIIN5', 'WEIIN6', 'WEIIN7', 'WEIIN8',
                'WEIIN9', 'WEIPR1', 'WEIPR10', 'WEIPR2', 'WEIPR3', 'WEIPR4',
                'WEIPR5', 'WEIPR6', 'WEIPR7', 'WEIPR8', 'WEIPR9', 'WEIWLD'
            ];
            break;

        case 'blockExample':
            matrix = [
                [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 1, 1], [0, 1, 1], [0, 1, 1],
                [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0],
                [0, 0, 1], [0, 1, 1], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0],
                [0, 0, 0], [0, 1, 0], [0, 1, 1], [0, 1, 1], [0, 1, 1], [0, 1, 1],
                [0, 1, 1], [0, 1, 1], [0, 1, 1], [0, 1, 1], [0, 1, 1], [0, 0, 0],
                [0, 0, 1], [0, 1, 1], [0, 1, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0],
                [0, 0, 0], [0, 1, 0], [0, 1, 1], [0, 1, 1], [0, 1, 1], [0, 1, 1],
                [0, 1, 1], [0, 1, 1], [0, 1, 1], [0, 1, 1], [0, 1, 1], [0, 0, 0],
                [0, 0, 1], [0, 0, 1], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0],
                [0, 0, 0], [0, 1, 1], [0, 1, 1], [0, 1, 1], [0, 1, 1], [1, 1, 1],
                [1, 1, 1], [1, 1, 1], [1, 1, 0], [1, 1, 1], [1, 1, 1], [1, 1, 1],
                [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 0], [1, 1, 1], [1, 1, 1],
                [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
                [1, 1, 1], [1, 0, 0], [1, 0, 0], [1, 0, 1], [1, 0, 0], [1, 0, 0],
                [1, 0, 0], [1, 0, 0], [1, 0, 0], [1, 0, 1], [1, 1, 1], [1, 1, 1],
                [1, 1, 1], [1, 1, 1], [1, 0, 1], [1, 0, 1], [1, 1, 1], [1, 1, 1],
                [1, 1, 0], [1, 1, 0], [1, 1, 0], [1, 0, 0], [1, 0, 0], [1, 0, 0],
                [1, 0, 0], [1, 0, 0], [1, 0, 0], [1, 0, 0], [1, 0, 0], [1, 0, 0],
                [1, 0, 0], [1, 0, 0], [1, 0, 0], [1, 0, 0], [1, 0, 0], [1, 0, 0],
                [1, 0, 0], [1, 0, 0], [1, 0, 0], [1, 0, 0]
            ];

            colLabels = ['Atomic Weight', 'Melting Point', 'Boiling Point'];
            break;
        default:
            return;
    }

    drawMatrixOnScreen(rowLabels, colLabels);
}

/** 
 * Reordena a matriz gerada de acordo com o método de reordenação escolhido
*/
function reorderMatrix() {
    let selectedOrder = $("input[name='order-option']:checked").val(),
        sort = new ReorderableMatrixSort(matrix);

    switch (selectedOrder) {
        case 'fvs':
            sort.fvs();
            break;
        case 'polar':
            sort.polarSort();
            break;
        case 'block':
            sort.blockReordering();
            break;
        case 'hybrid':
            sort.hybridSort();
            break;
        case 'original':
            sort.originalOrder();
            break;
        case 'shuffle':
            sort.shuffle();
            break;

        default:
            break;
    }

    table.order(sort.rowPerm, sort.colPerm);
}